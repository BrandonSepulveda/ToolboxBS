# ToolboxBS CI/CD Pipeline
# Automated validation and testing for ToolboxBS project

name: ToolboxBS CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Define permissions
permissions:
  contents: read

# Environment variables
env:
  POWERSHELL_TELEMETRY_OPTOUT: 1

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # Validate PowerShell scripts
  validate-powershell:
    name: Validate PowerShell Scripts
    runs-on: windows-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install PowerShell modules
        shell: pwsh
        run: |
          Install-Module -Name PSScriptAnalyzer -Force -Scope CurrentUser
          Import-Module PSScriptAnalyzer

      - name: Validate PowerShell syntax
        shell: pwsh
        run: |
          Write-Host "Validating PowerShell scripts..." -ForegroundColor Green
          $scripts = Get-ChildItem -Path "." -Filter "*.ps1" -Recurse
          $errors = 0
          
          foreach ($script in $scripts) {
            Write-Host "Checking: $($script.Name)" -ForegroundColor Yellow
            try {
              $null = [System.Management.Automation.PSParser]::Tokenize((Get-Content $script.FullName -Raw), [ref]$null)
              Write-Host "‚úì $($script.Name) - Syntax OK" -ForegroundColor Green
            }
            catch {
              Write-Host "‚úó $($script.Name) - Syntax Error: $_" -ForegroundColor Red
              $errors++
            }
          }
          
          if ($errors -gt 0) {
            Write-Host "$errors PowerShell syntax errors found" -ForegroundColor Red
            exit 1
          } else {
            Write-Host "All PowerShell scripts have valid syntax" -ForegroundColor Green
          }

      - name: Run PSScriptAnalyzer
        shell: pwsh
        run: |
          Write-Host "Running PSScriptAnalyzer..." -ForegroundColor Green
          $results = Invoke-ScriptAnalyzer -Path "." -Recurse -Severity Warning,Error
          
          if ($results) {
            $results | Format-Table -AutoSize
            $errorCount = ($results | Where-Object { $_.Severity -eq 'Error' }).Count
            $warningCount = ($results | Where-Object { $_.Severity -eq 'Warning' }).Count
            
            Write-Host "Found $errorCount errors and $warningCount warnings" -ForegroundColor Yellow
            
            if ($errorCount -gt 0) {
              Write-Host "Critical issues found - failing build" -ForegroundColor Red
              exit 1
            }
          } else {
            Write-Host "No issues found by PSScriptAnalyzer" -ForegroundColor Green
          }

  # Validate HTML files
  validate-web:
    name: Validate Web Files
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install HTML validation tools
        run: |
          npm install -g html-validate

      - name: Validate HTML files
        run: |
          echo "Validating HTML files..."
          find . -name "*.html" -type f | while read -r file; do
            echo "Checking: $file"
            if html-validate "$file"; then
              echo "‚úì $file - Valid HTML"
            else
              echo "‚úó $file - HTML validation failed"
              exit 1
            fi
          done

      - name: Check for broken links (basic)
        run: |
          echo "Checking for obvious broken references..."
          find . -name "*.html" -type f -exec grep -l "src=\"http" {} \; | while read -r file; do
            echo "External references found in: $file"
            grep -n "src=\"http" "$file" || true
          done

  # Security checks
  security-check:
    name: Security Validation
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check for sensitive data
        run: |
          echo "Checking for potentially sensitive data..."
          
          # Check for common sensitive patterns
          if grep -r -i "password\|secret\|key\|token" --include="*.ps1" --include="*.html" --include="*.js" .; then
            echo "‚ö†Ô∏è  Potential sensitive data found - please review"
          else
            echo "‚úì No obvious sensitive data patterns found"
          fi
          
          # Check for hardcoded URLs that might be problematic
          if grep -r "http://.*\|https://.*" --include="*.ps1" . | grep -v "github.com\|brandonsepulveda\|example.com"; then
            echo "‚ÑπÔ∏è  External URLs found - please verify they are intentional"
          fi

  # File integrity checks
  integrity-check:
    name: File Integrity Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check file encodings and line endings
        run: |
          echo "Checking file encodings and line endings..."
          
          # Check for files with BOM
          if find . -name "*.ps1" -exec file {} \; | grep -i "BOM"; then
            echo "‚ö†Ô∏è  Files with BOM found - consider removing BOM for better compatibility"
          fi
          
          # Check for mixed line endings
          find . -name "*.ps1" -o -name "*.html" -o -name "*.js" -o -name "*.css" | while read -r file; do
            if file "$file" | grep -q "CRLF.*LF\|LF.*CRLF"; then
              echo "‚ö†Ô∏è  Mixed line endings in: $file"
            fi
          done
          
          echo "‚úì File integrity check completed"

  # Build summary
  build-summary:
    name: Build Summary
    runs-on: ubuntu-latest
    needs: [validate-powershell, validate-web, security-check, integrity-check]
    if: always()
    
    steps:
      - name: Build Summary
        run: |
          echo "üéâ ToolboxBS validation completed!"
          echo "All checks have been performed."
          echo "Review the individual job results above for any issues."
